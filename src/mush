#!/usr/bin/env bash
# mush.sh - search & play via yt-dlp -> mpv with queue system
# Dependencies: yt-dlp, mpv, bash
# DEBUG=1 for verbose info

RESULTS=6
PROMPT_NAME="mush"
current_song="nenhuma"
mpv_pid=""
DEBUG=${DEBUG:-0}

queue=()           
queue_titles=()   
current_index=-1  

RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
BOLD="\e[1m"
RESET="\e[0m"

spinner_vinyl() {
  local frames=(
"            
   ████████   
  █        █  
 █   •      █ 
 █          █ 
  █        █  
   ████████   
            
"
"            
   ████████   
  █        █  
 █      •   █ 
 █          █ 
  █        █  
   ████████   
            
"
"            
   ████████   
  █        █  
 █        • █ 
 █          █ 
  █        █  
   ████████   
            
"
"            
   ████████   
  █        █  
 █   •      █ 
 █          █ 
  █        █  
   ████████   
            
"
  )
  local delay=0.15
  local clear="\033[H\033[J"

  while true; do
    for f in "${frames[@]}"; do
      printf "${clear}"            # limpa tela
      printf "%s\n" "$f"            # imprime frame
      echo -e "${MAGENTA}Carregando música...${RESET}"
      sleep $delay
    done
  done
}


cleanup() {
  [[ -n "$mpv_pid" ]] && kill "$mpv_pid" 2>/dev/null || true
}
trap cleanup EXIT

log() { [[ "$DEBUG" -eq 1 ]] && printf "${CYAN}[debug]${RESET} %s\n" "$*"; }
err() { printf "${RED}[error]${RESET} %s\n" "$*" >&2; }

play_url() {
  local url="$1"
  [[ -n "$mpv_pid" ]] && kill "$mpv_pid" 2>/dev/null || true
  mpv --no-video --really-quiet "$url" >/dev/null 2>&1 &
  mpv_pid=$!
  log "mpv pid=$mpv_pid"
}

pause_song() { [[ -n "$mpv_pid" ]] && kill -STOP "$mpv_pid"; echo -e "${YELLOW}paused.${RESET}"; }
resume_song() { [[ -n "$mpv_pid" ]] && kill -CONT "$mpv_pid"; echo -e "${GREEN}resumed.${RESET}"; }
stop_song() { [[ -n "$mpv_pid" ]] && kill "$mpv_pid" 2>/dev/null && wait "$mpv_pid" 2>/dev/null; mpv_pid=""; current_song="nenhuma"; }

next_song() {
  if (( current_index + 1 < ${#queue[@]} )); then
    ((current_index++))
    current_song="${queue_titles[$current_index]}"
    echo -e "${GREEN}[▶ TOCANDO]${RESET} ${BOLD}$current_song${RESET}"
    play_url "${queue[$current_index]}"
  else
    echo -e "${YELLOW}Fim da fila.${RESET}"
  fi
}

prev_song() {
  if (( current_index - 1 >= 0 )); then
    ((current_index--))
    current_song="${queue_titles[$current_index]}"
    echo -e "${GREEN}[▶ TOCANDO]${RESET} ${BOLD}$current_song${RESET}"
    play_url "${queue[$current_index]}"
  else
    echo -e "${YELLOW}Início da fila.${RESET}"
  fi
}

search_print() {
  local query="$*"
  local cmd=(yt-dlp --no-warnings --print "%(id)s|%(title)s|%(uploader)s|%(duration)s" "ytsearch${RESULTS}:${query}")
  log "Exec: ${cmd[*]}"
  if [[ "$DEBUG" -eq 1 ]]; then
    "${cmd[@]}"
  else
    "${cmd[@]}" 2>/dev/null   
  fi
}

show_results_and_choose() {
  local query="$*"
  mapfile -t lines < <(search_print "$query")
  local tmp=()
  for l in "${lines[@]}"; do [[ -n "${l// /}" ]] && tmp+=("$l"); done
  lines=("${tmp[@]}")

  if [[ ${#lines[@]} -eq 0 ]]; then
    err "nenhum resultado para: $query"
    return 1
  fi

  echo -e "${BOLD}Resultados para:${RESET} $query"
  for i in "${!lines[@]}"; do
    IFS='|' read -r id title uploader duration <<<"${lines[$i]}"
    printf "  ${YELLOW}%2s)${RESET} %.80s — %s [%s]\n" "$((i+1))" "$title" "$uploader" "$duration"
  done
  echo
  printf "${CYAN}Escolha numero (1-%s), 'a' tocar todos, 'c' cancelar: ${RESET}" "${#lines[@]}"
  read -r choice

  if [[ "$choice" == "c" ]]; then return 1; fi

  if [[ "$choice" == "a" ]]; then
    for l in "${lines[@]}"; do
      IFS='|' read -r id title uploader duration <<<"$l"
      url=$(yt-dlp -f bestaudio --get-url "https://www.youtube.com/watch?v=${id}" 2>/dev/null)
      [[ -z "$url" ]] && err "Falha ao obter stream pra ${title}" && continue
      queue+=("$url")
      queue_titles+=("$title")
    done
    current_index=0
    current_song="${queue_titles[$current_index]}"
    echo -e "${GREEN}[▶ TOCANDO]${RESET} ${BOLD}$current_song${RESET}"
    play_url "${queue[$current_index]}"
    return 0
  fi

  if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= ${#lines[@]} )); then
    selected="${lines[$((choice-1))]}"
    IFS='|' read -r id title uploader duration <<<"$selected"
    url=$(yt-dlp -f bestaudio --get-url "https://www.youtube.com/watch?v=${id}" 2>/dev/null)
    [[ -z "$url" ]] && err "Falha ao obter stream" && return 1
    queue+=("$url")
    queue_titles+=("$title")
    current_index=${#queue[@]}-1
    current_song="$title"
    echo -e "${GREEN}[▶ TOCANDO]${RESET} ${BOLD}$current_song${RESET}"
    play_url "$url"
    return 0
  fi

  err "Escolha inválida."
  return 1
}

list_queue() {
  if (( ${#queue_titles[@]} == 0 )); then
    echo -e "${YELLOW}Fila vazia.${RESET}"
    return
  fi

  echo -e "${BOLD}Fila de músicas:${RESET}"
  for i in "${!queue_titles[@]}"; do
    if (( i == current_index )); then
      printf "  ${GREEN}-> %2s)${RESET} ${YELLOW}%s${RESET}\n" "$((i+1))" "${queue_titles[$i]}"
    else
      printf "     %2s) %s\n" "$((i+1))" "${queue_titles[$i]}"
    fi
  done
}

set_results() {
  local n="$1"
  if [[ "$n" =~ ^[0-9]+$ ]] && (( n > 0 && n <= 50 )); then
    RESULTS="$n"
    echo -e "${GREEN}Resultados por busca definido para: $RESULTS${RESET}"
  else
    echo -e "${RED}Informe um numero entre 1 e 50${RESET}"
  fi
}

HISTORY_DIR="$HOME/.mush"
HISTORY_FILE="$HISTORY_DIR/history"
PLAYLISTS_DIR="$HISTORY_DIR/playlists"

mkdir -p "$PLAYLISTS_DIR"
touch "$HISTORY_FILE"

add_to_history() {
    local title="$1"
    local url="$2"
    echo "$(date +'%Y-%m-%d %H:%M:%S')|$title|$url" >> "$HISTORY_FILE"
}

show_history() {
    if [[ ! -s "$HISTORY_FILE" ]]; then
        echo -e "${YELLOW}Histórico vazio.${RESET}"
        return
    fi
    nl -w2 -s') ' "$HISTORY_FILE" | awk -F'|' '{print $1") "$2" ["$3"]"}'
}

play_from_history() {
    local index="$1"
    local line
    line=$(sed -n "${index}p" "$HISTORY_FILE")
    [[ -z "$line" ]] && { err "Entrada inválida no histórico"; return 1; }
    IFS='|' read -r datetime title url <<<"$line"
    queue+=("$url")
    queue_titles+=("$title")
    current_index=${#queue[@]}-1
    current_song="$title"
    echo -e "${GREEN}[▶ TOCANDO]${RESET} ${BOLD}$current_song${RESET}"
    play_url "$url"
}

create_playlist() {
    local name="$1"
    local file="$PLAYLISTS_DIR/$name.txt"
    [[ -e "$file" ]] && { echo -e "${YELLOW}Playlist já existe.${RESET}"; return; }
    touch "$file"
    echo -e "${MAGENTA}Playlist '$name' criada em $file${RESET}"
}

add_to_playlist() {
    local name="$1"
    local title="$2"
    local url="$3"
    local file="$PLAYLISTS_DIR/$name.txt"
    [[ ! -e "$file" ]] && { echo -e "${RED}Playlist não existe.${RESET}"; return; }
    echo "$title|$url" >> "$file"
    echo -e "${GREEN}Música adicionada à '$name'${RESET}"
}

show_playlists() {
    ls "$PLAYLISTS_DIR"
}

play_playlist() {
    local name="$1"
    local file="$PLAYLISTS_DIR/$name.txt"
    [[ ! -e "$file" ]] && { echo -e "${RED}Playlist não encontrada.${RESET}"; return; }
    while IFS='|' read -r title url; do
        queue+=("$url")
        queue_titles+=("$title")
    done < "$file"
    current_index=0
    current_song="${queue_titles[$current_index]}"
    echo -e "${GREEN}[▶ TOCANDO]${RESET} ${BOLD}$current_song${RESET}"
    play_url "${queue[$current_index]}"
}

save_like() {
   [[ -z "$current_song" || -z "${queue[$current_index]}" ]] && return
    mkdir -p "$HISTORY_DIR/liked"
    echo "$current_song|${queue[$current_index]}" >> "$HISTORY_DIR/liked/liked.txt"
    echo -e "${GREEN}Música salva em liked.${RESET}"
}

save_dislike() {
    [[ -z "$current_song" || -z "${queue[$current_index]}" ]] && return
    mkdir -p "$HISTORY_DIR/dislikes"
    echo "$current_song|${queue[$current_index]}" >> "$HISTORY_DIR/dislikes/disliked.txt"
    echo -e "${RED}Música marcada como dislike.${RESET}"
}

fy_play() {
  fy_mode=1
  mapfile -t candidates < <(grep -vFf "$DISLIKED_FILE" "$HISTORY_FILE")
  if [[ ${#candidates[@]} -eq 0 ]]; then
    err "Nenhuma música disponível"
    return
  fi
  selection="${candidates[$RANDOM % ${#candidates[@]}]}"
  current_song="${selection%%|*}"
  fy_url="${selection#*|}"
  play_url "$fy_url"
  append_history "$fy_url"
}

fy_like() {
  mkdir -p "$HISTORY_DIR/liked"
  echo "$current_song|$fy_url" >> "$LIKED_FILE"
  fy_play
}

fy_dislike() {
  mkdir -p "$HISTORY_DIR/dislikes"
  echo "$current_song|$fy_url" >> "$DISLIKED_FILE"
  fy_play
}

append_history() {
  mkdir -p "$HISTORY_DIR"
  echo "$current_song|$1" >> "$HISTORY_FILE"
}

while true; do

    printf "${BLUE}[${BOLD}%s${RESET}${BLUE} - ${BOLD}%s${RESET}${BLUE}]> ${RESET}" "$current_song" "$PROMPT_NAME"
  if ! IFS= read -r query; then echo; break; fi
  query="${query## }"; query="${query%% }"; [[ -z "$query" ]] && continue

case "$query" in
    :q|exit)
        break
        ;;
    :sfy|:stopfy)
        fy_mode=0
        [[ -n "$mpv_pid" ]] && kill "$mpv_pid" 2>/dev/null
        mpv_pid=""
        current_song="nenhuma"
        echo -e "${YELLOW}FY Mode parado.${RESET}"
        ;;
    :s|:stop)
        if [[ -n "$mpv_pid" ]] && kill -0 "$mpv_pid" 2>/dev/null; then
            kill "$mpv_pid" 2>/dev/null || true
            wait "$mpv_pid" 2>/dev/null || true
            mpv_pid=""
            current_song="nenhuma"
            echo -e "${YELLOW}Stopped.${RESET}"
        else
            echo -e "${YELLOW}Nada tocando.${RESET}"
        fi
        ;;
    :pause)
        [[ -n "$mpv_pid" ]] && kill -STOP "$mpv_pid" 2>/dev/null && echo -e "${YELLOW}Pausado.${RESET}"
        ;;
    :resume)
        [[ -n "$mpv_pid" ]] && kill -CONT "$mpv_pid" 2>/dev/null && echo -e "${GREEN}Resumido.${RESET}"
        ;;
    :next)
        next_song
        ;;
    :prev)
        prev_song
        ;;
    :list|:ls)
        list_queue
        ;;
    :fy) fy_play ;;
    :like) fy_mode=1; fy_like ;;
    :dislike) fy_mode=1; fy_dislike ;;
    :save) fy_mode=1; fy_like ;;
    :setresults)
        read -p "Quantidade de resultados (1-50): " n
        set_results "$n"
        ;;
    :history)
        show_history
        ;;
    :playlists|:pl)
        show_playlists
        ;;
    :create*)
        name="${query#*:create }"
        create_playlist "$name"
        ;;
    :add*)
        playlist="${query#*:add }"
        add_to_playlist "$playlist" "$current_song" "${queue[$current_index]}"
        ;;
    :play*)
        playlist="${query#*:play }"
        play_playlist "$playlist"
        ;;
    :cls|:clear)
        clear -x
        ;;
    :h|:help)
        echo -e "${BOLD}Comandos:${RESET}"
        echo ":q, exit           - sair"
        echo ":s, :stop          - parar música atual"
        echo ":fy                - inicia o modo de fy"
        echo ":like              - like no modo fy"
        echo ":dislike           - dislike no modo fy"
        echo ":save              - salve a música para o modo fy"
        echo ":pause             - pausar música"
        echo ":resume            - retomar música"
        echo ":next              - próxima música na fila"
        echo ":prev              - música anterior"
        echo ":list              - listar fila"
        echo ":setresults        - quantidade de resultados por busca"
        echo ":history           - mostrar histórico"
        echo "!<n>               - tocar música do histórico"
        echo ":playlists         - listar playlists"
        echo ":create <name>     - criar playlist"
        echo ":add <playlist>    - adicionar música à playlist"
        echo ":play <playlist>   - tocar playlist"
        echo ":cls, :clear       - limpar tela"
        echo ":h, :help          - ajuda"
        ;;
    !*)
        num="${query#!}"
        play_from_history "$num"
        ;;
    *)
        show_results_and_choose "$query"
        ;;
esac
done
stop_song
echo -e "${CYAN}bye.${RESET}"

