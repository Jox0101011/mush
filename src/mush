#!/usr/bin/bash
# mush.sh - search & play via yt-dlp -> mpv
# Dependencies: yt-dlp, mpv, bash
# DEBUG=1 for verbose info

RESULTS=6
PROMPT_NAME="mush"
current_song="nenhuma"
mpv_pid=""
DEBUG=${DEBUG:-0}

cleanup() {
  [[ -n "$mpv_pid" ]] && kill "$mpv_pid" 2>/dev/null || true
}
trap cleanup EXIT

log() { [[ "$DEBUG" -eq 1 ]] && printf "[debug] %s\n" "$*"; }
err() { printf "\e[31m[error]\e[0m %s\n" "$*" >&2; }

play_url() {
  local url="$1"
  # kill previous mpv
  if [[ -n "$mpv_pid" ]] && kill -0 "$mpv_pid" 2>/dev/null; then
    kill "$mpv_pid" 2>/dev/null || true
    wait "$mpv_pid" 2>/dev/null || true
  fi

  mpv --no-video --really-quiet "$url" >/dev/null 2>&1 &
  mpv_pid=$!
  log "mpv pid=$mpv_pid"
}

search_print() {
  local query="$*"
  
  # adiciona --no-warnings para reduzir ruído
  local cmd=(yt-dlp --no-warnings --print "%(id)s|%(title)s|%(uploader)s|%(duration)s" "ytsearch${RESULTS}:${query}")
  log "Exec: ${cmd[*]}"
  if [[ "$DEBUG" -eq 1 ]]; then
    "${cmd[@]}"
  else
    "${cmd[@]}" 2>/dev/null
  fi
}

show_results_and_choose() {
  local query="$*"
  # pega linhas do yt-dlp
  mapfile -t lines < <(search_print "$query")
  # strip empty lines
  local tmp=()
  for l in "${lines[@]}"; do
    [[ -z "${l// /}" ]] && continue
    tmp+=("$l")
  done
  lines=("${tmp[@]}")

  if [[ ${#lines[@]} -eq 0 ]]; then
    err "nenhum resultado para: $query"
    if [[ "$DEBUG" -eq 1 ]]; then
      echo "---- raw json dump (first 1) ----"
      yt-dlp -j "ytsearch1:${query}" 2>/dev/null | sed -n '1,20p'
      echo "---- end dump ----"
    fi
    return 1
  fi

  echo
  echo "resultados para: $query"
  for i in "${!lines[@]}"; do
    line="${lines[$i]}"
    IFS='|' read -r id title uploader duration <<<"$line"
    printf "  %2s) %.80s — %s [%s]\n" "$((i+1))" "$title" "$uploader" "$duration"
  done
  echo
  printf "escolha numero (1-%s), 'a' tocar todos, 'c' cancelar: " "${#lines[@]}"
  read -r choice

  if [[ "$choice" == "c" ]]; then
    return 1
  fi

  if [[ "$choice" == "a" ]]; then
    for l in "${lines[@]}"; do
      IFS='|' read -r id title uploader duration <<<"$l"
      current_song="$title"
      echo "[ tocando ] $title — $uploader"
      url=$(yt-dlp -f bestaudio --get-url "https://www.youtube.com/watch?v=${id}" 2>/dev/null)
      if [[ -z "$url" ]]; then
        err "Falha ao obter stream pra ${title}"
        continue
      fi
      play_url "$url"
      wait "$mpv_pid"
    done
    return 0
  fi

  if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= ${#lines[@]} )); then
    selected="${lines[$((choice-1))]}"
    IFS='|' read -r id title uploader duration <<<"$selected"
    current_song="$title"
    echo "[ tocando ] $title — $uploader"
    url=$(yt-dlp -f bestaudio --get-url "https://www.youtube.com/watch?v=${id}" 2>/dev/null)
    if [[ -z "$url" ]]; then
      err "Falha ao obter stream"
      return 1
    fi
    play_url "$url"
    return 0
  fi

  err "Escolha inválida."
  return 1
}

while true; do
  printf "[ %s - %s ]> " "$current_song" "$PROMPT_NAME"
  if ! IFS= read -r query; then
    echo
    break
  fi
  query="${query## }"
  query="${query%% }"
  [[ -z "$query" ]] && continue

  case "$query" in
    :q|exit) break ;;
    :cls|clear) clear -x ;;
    :s|:stop)
      if [[ -n "$mpv_pid" ]] && kill -0 "$mpv_pid" 2>/dev/null; then
        kill "$mpv_pid" 2>/dev/null || true
        wait "$mpv_pid" 2>/dev/null || true
        mpv_pid=""
        current_song="nenhuma"
        echo "stopped."
      else
        echo "Nada tocando."
      fi
      ;;
    :h|:help)
      echo ":q, exit - sair"
      echo ":s, :stop - parar música atual"
      echo "DEBUG=1 ./mush.sh  -> mostra debug"
      ;;
    *)
      show_results_and_choose "$query"
      ;;
  esac
done

echo "bye."

